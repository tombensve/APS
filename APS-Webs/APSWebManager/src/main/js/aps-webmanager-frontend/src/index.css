body {
    margin: 5px;
    padding: 5px;
    font-family: sans-serif;
}

/*.aps-flexbox-vertical {*/
/*display: flex;*/
/*flex-direction: column;*/
/*justify-content: flex-start;*/
/*}*/

/*.aps-flexbox-horizontal {*/
/*display: flex;*/
/*flex-direction: row;*/
/*justify-content: flex-start;*/
/*!*flex: 10;*!*/
/*padding: 5px;*/
/*}*/

/* As suggested from docs. */
.react-layout-components--box {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

/*
    I have decided to not inline styles in components even though it sometimes makes sense to do so
    since the style is in some form part of the component. Inlining styles however screws things up
    when you do want to use a component and change its style slightly. Sticking to css allows for
    extensions of styles like for the react-bootstrap styles below.
*/

/* ==== React-Bootstrap overrides ==== */

.form-control {
    margin-right: 10px;
    margin-bottom: 10px;
    /*
     * This overrides the default "width:100%" which is a bad default IM(NS)HO.
     * The GUI looks really weird with width:100% and some components don't get their
     * minimum display width while others become overly large, more than they need.
     * With "auto" width it renders very nicely with correct / expected sizes of all
     * components.
     */
    width: auto;
}

.form-group {
    margin-right: 10px;
    margin-bottom: 10px;
}

.control-label {
    margin-right: 10px;
    margin-bottom: 10px;
}

.btn {
    margin-right: 10px;
    margin-bottom: 10px;
}

label, input {
    display: inline-block;
    margin-right: 10px;
    margin-bottom: 10px;
}

/* ==== APSWebManager component styles ==== */

/* APSTree */

.aps-tree-branchleaf {
    white-space: nowrap;
    margin-right: 10px;
}

.aps-tree-node {
    margin-left: 20px;
}

/*.form-inline > * {*/
/*margin-left:5px !important;*/
/*margin-right:5px !important;*/
/*}*/

