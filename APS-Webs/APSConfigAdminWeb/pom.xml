<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>APS-Webs</artifactId>
        <groupId>se.natusoft.osgi.aps</groupId>
        <version><!--APSVER-->0.9.0</version>
    </parent>
    
    <groupId>se.natusoft.osgi.aps</groupId>
    <artifactId>aps-config-admin-web</artifactId>
    <packaging>war</packaging>
    
    <name>APS Configuration Admin Web</name>
    
    <description>Edits configurations registered with the APSConfigurationService.</description>
    
    <properties>
        <vaadin-ver>6.8.1</vaadin-ver>

        <!-- 
            Bundle properties 
        -->
        
        <!-- The symbolic name of the bundle. Defaults to the artifact id, but can be overridden. -->
        <osgi.bundle.symbolic.name>${project.artifactId}</osgi.bundle.symbolic.name>
        
        <!-- The bundle activator class -->
        <osgi.bundle.activator>se.natusoft.osgi.aps.apsconfigadminweb.APSConfigAdminWebActivator</osgi.bundle.activator>

        <aps.config.classes>se.natusoft.osgi.aps.apsconfigadminweb.config.CAWConfig</aps.config.classes>
        
        <!-- The context path of a war bundle (WAB). Setting this enables Web-ContextPath: in MANIFEST.MF. -->
        <osgi.web.context.path>apsadminweb/config</osgi.web.context.path>
        
        <!-- The osgi Bundle-ClassPath manifest entry. -->
        <osgi.bundle.classpath>
            .,WEB-INF/classes,WEB-INF/lib/vaadin-${vaadin-ver}.jar,WEB-INF/lib/aps-web-tools-1.0.0.jar
        </osgi.bundle.classpath>

        <!-- The bundle packages to export. -->
        <osgi.export.package>
            se.natusoft.osgi.aps.apsconfigadminweb.config
        </osgi.export.package>
        
        <!-- The packages to import for the bundle. -->
        <osgi.import.package>
            javax.servlet,
            javax.servlet.http,
            javax.xml.namespace,
            org.w3c.dom,
            org.osgi.framework;version="[1.5,2)",
            org.osgi.service.log;version="[1.3,2)",
            org.osgi.util.tracker;version="[1.4,2)",
            se.natusoft.osgi.aps.api.core.config;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.core.config.annotation;version="${aps.import.ver}",
            se.natusoft.osgi.aps.exceptions;version="${aps.import.ver}",
            se.natusoft.osgi.aps.tools;version="${aps.import.ver}",
            se.natusoft.osgi.aps.tools.tracker;version="${aps.import.ver}",
            se.natusoft.osgi.aps.tools.models;version="${aps.import.ver}",
            se.natusoft.osgi.aps.apsadminweb.service;version="${aps.import.ver}",
            se.natusoft.osgi.aps.apsadminweb.service.model;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.core.config.service;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.core.config.model;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.core.config.model.admin;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.auth.user;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.auth.user.model;version="${aps.import.ver}",
            se.natusoft.osgi.aps.api.misc.session;version="${aps.import.ver}"
        </osgi.import.package>
                
        <!-- The private packages. -->
        <osgi.private.package>
        <!--
            By default, any package not exported are private. This is a convenience specification. Among the export, import and
            private package specifications the only you most likely don't want to specify is the import packages since those are
            usually quite a lot of work to resolve. Therefore you can specify export and private packages and then specify "*"
            for import packages and have the plugin resolve all import packages automatically by excluding export and private.

            In this specific case however we are actually manually specifying our import package list, which in this case is
            quite simple and thereby we don't need to specify any private packages. The reason for having a quite small import
            package list here is due to that we have most of our dependencies embedded locally in the WAR/VAB. The reason for
            that is that even though the Vaadin jar is an OSGi bundle we cannot deploy it separately as its own bundle since
            we are a web application managed by a web.xml, where the web container creates the Vaadin servlet and passes the
            init params to it, which includes the fully qualified class name of APSConfigAdminWebApp. Now the Vaadin servlet
            tries to load and instantiate this class and for that to succeed the class has to be available in the classpath
            of the vaadin servlet. If the Vaadin servlet was deployed as an OSGi bundle then it has its own class loader
            which import nothing from this bundle since it doesn't know anything about this bundle, thereby making it
            impossible for the Vaadin servlet to se our Vaadin application class. When we however embed Vaadin locally
            in our bundle both Vaadin and our Vaadin application are loaded with the same class loader.

        -->
        </osgi.private.package>

        <!-- Resources to include in bundle. -->
        <osgi.include.resource>
        </osgi.include.resource>
        
        <!-- The packages to export from dependent & embeded jars -->
        <osgi.export.dependency.package>            
        </osgi.export.dependency.package>
        
        <!-- The default for embedding dependencies in bundle. -->
        <osgi.embed.dependency>*;scope=compile</osgi.embed.dependency>
        
        <!-- The directory whose content should be embeded into the bundle. -->
        <osgi.embed.directory>WEB-INF/lib</osgi.embed.directory>
        
        <!--
            This specifies the package-ing type of the produced bundle to deploy. Should be either "jar" or "war",
            where "jar" is the default. To override this set this property in local pom.
        -->
        <server.deploy.artifact.type>war</server.deploy.artifact.type>
        
        <!--
            Other properties
        -->
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--
            APS
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-apis</artifactId>
            <version>${project.version}</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-tools-lib</artifactId>
            <version>${project.version}</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-web-tools</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-admin-web-service-provider</artifactId>
            <version>${project.version}</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>

        <!--
            Third party
        -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin</artifactId>
            <version>${vaadin-ver}</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>6.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            
            <!--
                Force the jar plugin to use the maven-bundle-plugin generated manifest.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive> 
                </configuration>
            </plugin>  

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>                     
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            
            <!--
                OSGi bundle handling.
            -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.3.5</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                        <supportedProjectType>war</supportedProjectType>
                    </supportedProjectTypes>
                    <archive>
                        <manifestEntries>
                            <Bundle-ClassPath>${osgi.bundle.classpath}</Bundle-ClassPath>
                            <Web-ContextPath>${osgi.web.context.path}</Web-ContextPath>
                            <APS-Configs>${aps.config.classes}</APS-Configs>
                        </manifestEntries>                        
                    </archive>
                    <instructions>
                        <Export-Package>${osgi.export.package}</Export-Package>
                        <Import-Package>${osgi.import.package}</Import-Package>
                        <_exportcontents>${osgi.export.dependency.package}</_exportcontents>
                        <Private-Package>${osgi.private.package}</Private-Package>
                        <Include-Resource>${osgi.include.resource}</Include-Resource>
                        <Bundle-SymbolicName>${osgi.bundle.symbolic.name}</Bundle-SymbolicName>
                        <Bundle-Activator>${osgi.bundle.activator}</Bundle-Activator>
                        <Embed-Directory>${osgi.embed.directory}</Embed-Directory>
                        <Embed-Dependency>${osgi.embed.dependency}</Embed-Dependency>
                    </instructions>
                </configuration>
            </plugin>
            
        </plugins>
    </build>
    
</project>
