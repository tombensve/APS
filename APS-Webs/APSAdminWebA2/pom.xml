<?xml version="1.0" encoding="UTF-8"?>
<!--
    PROJECT
        Name
            APS VertX Provider

        Code Version
            1.0.0

        Description
            This service provides configured Vertx instances allowing multiple services to use the same Vertx instance.

            This service also provides for multiple instances of VertX by associating an instance with a name. Everyone
            asking for the same name will get the same instance.

    COPYRIGHTS
        Copyright (C) 2012 by Natusoft AB All rights reserved.

    LICENSE
        Apache 2.0 (Open Source)

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

    AUTHORS
        tommy ()
            Changes:
            2017-01-01: Created!

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>APS-Webs</artifactId>
        <groupId>se.natusoft.osgi.aps</groupId>
        <version>1.0.0</version>
    </parent>

    <artifactId>aps-admin-web-a2</artifactId>
    <packaging>bundle</packaging>

    <name>APS Admin Web A2</name>

    <description>
        This is a remake of old Vaadin APSAdminWeb made with Vert.x and Angular 2 instead.
    </description>

    <properties>
        <!--
            Bundle properties
        -->

        <!-- The symbolic name of the bundle. Defaults to the artifact id, but can be overridden. -->
        <osgi.bundle.symbolic.name>${project.artifactId}</osgi.bundle.symbolic.name>

        <!-- The bundle activator class -->
        <osgi.bundle.activator>se.natusoft.osgi.aps.tools.APSActivator</osgi.bundle.activator>

        <!-- The bundle packages to export. -->
        <osgi.export.package>
        </osgi.export.package>

        <!-- The packages to import for the bundle. -->
        <osgi.import.package>*</osgi.import.package>

        <!-- The private packages. -->
        <osgi.private.package>
            se.natusoft.osgi.aps.web.adminweb;version="${project.version}",
            se.natusoft.osgi.aps.web.adminweb.config;version="${project.version}",
            webContent;version="${project.version}"
        </osgi.private.package>

        <!-- The packages to export from dependent & embeded jars -->
        <!--
            Export the non OSGi compliant vertx-lang-groovy packages.
        -->
        <osgi.export.dependency.package>
        </osgi.export.dependency.package>

        <!-- The resources to include in the bundle -->
        <osgi.include.resource>
            <!--webContent/adminweb-bundle.js=src/main/resources/webContent/adminweb-bundle.js,-->
            webContent/index.html=src/main/resources/webContent/index.html,
            webContent/shim.min.js=src/main/resources/webContent/shim.min.js,
            webContent/sockjs.min.js=src/main/resources/webContent/sockjs.min.js,
            webContent/vertx-eventbus.js=src/main/resources/webContent/vertx-eventbus.js,
            webContent/zone.js=src/main/resources/webContent/zone.js,
            webContent/apsadminweb-tpl.html=src/main/typescript/app/components/apsadminweb/apsadminweb-tpl.html,
            webContent/apsadminweb.css=src/main/typescript/app/components/apsadminweb/apsadminweb.css,
            webContent/static/=src/main/typescript/static/,
            webContent/verify-tpl.html=src/main/typescript/app/components/verify/verify-tpl.html
        </osgi.include.resource>

        <!-- The default for embedding dependencies in bundle. -->
        <osgi.embed.dependency>*;scope=compile</osgi.embed.dependency>

        <!-- The directory whose content should be embeded into the bundle jar. -->
        <osgi.embed.directory>lib</osgi.embed.directory>

        <!--
            APS properties.
        -->

        <!-- We register our configuration for auto registration and management. -->
        <aps.config.classes>
            se.natusoft.osgi.aps.web.adminweb.config.ContentServerConfig.class
        </aps.config.classes>

        <!--
            Other properties
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--
            APS
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-apis</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-tools-lib</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-admin-web-service-provider</artifactId>
            <version>1.0.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-vertx-provider</artifactId>
            <version>1.0.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>${vertx.version}</version>
            <scope>provided</scope>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>io.vertx</groupId>-->
        <!--<artifactId>vertx-auth-common</artifactId>-->
        <!--<version>${vertx.version}</version>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
            <version>${vertx.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-groovy-tools-lib</artifactId>
            <version>1.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Unfortunately needed since IDEA can't see the mixin and keep removing groovy if added manually in IDEA. -->
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <scope>provided</scope>
            <classifier>indy</classifier>
            <version>${groovy.version}</version>
        </dependency>

        <!--
            Test
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-osgi-test-tools</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-service-test-support</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <!--
                Force the jar plugin to use the maven-bundle-plugin generated manifest.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <!--
                Mixins
            -->
            <plugin>
                <groupId>com.github.odavid.maven.plugins</groupId>
                <artifactId>mixin-maven-plugin</artifactId>
                <configuration>
                    <mixins>
                        <mixin>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>groovy-mixin</artifactId>
                            <version>${project.version}</version>
                        </mixin>
                        <mixin>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>deploy-bundle-mixin</artifactId>
                            <version>${project.version}</version>
                        </mixin>
                    </mixins>
                </configuration>
            </plugin>

            <!--
                Copy web content
            -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <copy file="src/main/typescript/index.html"
                                      tofile="src/main/resources/webContent/index.html" filtering="false"/>
                                <copy file="src/main/typescript/node_modules/core-js/client/shim.min.js"
                                      tofile="src/main/resources/webContent/shim.min.js" filtering="false"/>
                                <copy file="src/main/typescript/node_modules/zone.js/dist/zone.min.js"
                                      tofile="src/main/resources/webContent/zone.js" filtering="false"/>
                                <copy file="src/main/typescript/node_modules/sockjs-client/dist/sockjs.min.js"
                                      tofile="src/main/resources/webContent/sockjs.min.js" filtering="false"/>
                                <copy file="src/main/typescript/node_modules/vertx3-eventbus-client/vertx-eventbus.js"
                                      tofile="src/main/resources/webContent/vertx-eventbus.js" filtering="false"/>
                                <copy file="src/main/typescript/static/adminweb-bundle.js"
                                      tofile="src/main/resources/webContent/adminweb-bundle.js" filtering="false"/>
                                <!--<copy file="src/main/typescript/node_modules/" tofile="src/main/resources/webContent/" filtering="false"/>-->
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>

                    </execution>
                </executions>

            </plugin>

            <!--
                OSGi bundle handling.
            -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                    </supportedProjectTypes>
                    <archive>
                        <manifestEntries>
                            <APS-Configs>${aps.config.classes}</APS-Configs>
                            <!--Bundle-ClassPath>${osgi.bundle.classpath}</Bundle-ClassPath-->
                        </manifestEntries>
                    </archive>
                    <instructions>
                        <Export-Package>${osgi.export.package}</Export-Package>
                        <Import-Package>${osgi.import.package}</Import-Package>
                        <_exportcontents>${osgi.export.dependency.package}</_exportcontents>
                        <Private-Package>${osgi.private.package}</Private-Package>
                        <Include-Resource>${osgi.include.resource}</Include-Resource>
                        <Bundle-SymbolicName>${osgi.bundle.symbolic.name}</Bundle-SymbolicName>
                        <Bundle-Activator>${osgi.bundle.activator}</Bundle-Activator>
                        <Embed-Directory>${osgi.embed.directory}</Embed-Directory>
                        <Embed-Dependency>${osgi.embed.dependency}</Embed-Dependency>
                    </instructions>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
