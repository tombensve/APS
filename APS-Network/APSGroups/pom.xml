<?xml version="1.0" encoding="UTF-8"?>
<!--

    PROJECT
        Name
            APS Groups

        Code Version
            1.0.0

        Description
            Provides network groups where named groups can be joined as members and then send and
            receive data types to the group. This is based on multicast and provides a verified
            multicast delivery with acknowledgements of receive to the sender and resends if needed.
            The sender will get an exception if not all members receive all data. Member actuality
            is handled by members announcing themselves relatively often and will be removed when
            an announcement does not come in expected time. So if a member dies unexpectedly
            (network goes down, etc) its membership will resolve rather quickly. Members also
            tries to inform the group when they are doing a controlled exit. Most network aspects
            are configurable. Please note that this does not support streaming! That would require
            a far more complex protocol. It waits in all packets of a message before delivering
            the message.

            Note that even though this is an OSGi bundle, the jar produced can also be used as a
            library outside of OSGi. The se.natusoft.apsgroups.APSGroups API should then be used.
            This API has no external dependencies, only this jar is required for that use.

            When run with java -jar a for test command line shell will run where you can check
            members, send types and files.

    COPYRIGHTS
        Copyright (C) 2012 by Natusoft AB All rights reserved.

    LICENSE
        Apache 2.0 (Open Source)

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

    AUTHORS
        Tommy Svensson (tommy@natusoft.se)
            Changes:
            2013-02-03: Created!

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>APS-Network</artifactId>
        <groupId>se.natusoft.osgi.aps</groupId>
        <version>1.0.0</version>
    </parent>

    <artifactId>aps-groups</artifactId>
    <packaging>bundle</packaging>

    <name>APS Groups</name>

    <description>
        Provides network groups where named groups can be joined as members and then send and
        receive data messages to the group. This is based on multicast and provides a verified
        multicast delivery with acknowledgements of receive to the sender and resends if needed.
        The sender will get an exception if not all members receive all data. Member actuality
        is handled by members announcing themselves relatively often and will be removed when
        an announcement does not come in expected time. So if a member dies unexpectedly
        (network goes down, etc) its membership will resolve rather quickly. Members also
        tries to inform the group when they are doing a controlled exit. Most network aspects
        are configurable. Please note that this does not support streaming! That would require
        a far more complex protocol. It waits in all packets of a message before delivering
        the message.

        Note that even though this is an OSGi bundle, the jar produced can also be used as a
        library outside of OSGi. The se.natusoft.apsgroups.APSGroups API should then be used.
        This API has no external dependencies, only this jar is required for that use.

        When run with java -jar a for test command line shell will run where you can check
        members, send messages and files.
    </description>

    <properties>
        <!--
            Bundle properties
        -->

        <!-- The symbolic name of the bundle. Defaults to the artifact id, but can be overridden. -->
        <osgi.bundle.symbolic.name>${project.artifactId}</osgi.bundle.symbolic.name>

        <!-- The bundle activator class -->
        <osgi.bundle.activator>se.natusoft.osgi.aps.groups.APSGroupsActivator</osgi.bundle.activator>

        <!-- The bundle packages to export. -->
        <osgi.export.package>
        </osgi.export.package>

        <!-- The packages to import for the bundle. -->
        <osgi.import.package>*</osgi.import.package>

        <!-- The private packages. -->
        <osgi.private.package>
            se.natusoft.apsgroups,
            se.natusoft.apsgroups.codeclarity,
            se.natusoft.apsgroups.config,
            se.natusoft.apsgroups.internal,
            se.natusoft.apsgroups.internal.net,
            se.natusoft.apsgroups.internal.protocol,
            se.natusoft.apsgroups.internal.protocol.message,
            se.natusoft.apsgroups.internal.protocol.message.exception,
            se.natusoft.apsgroups.logging,
            se.natusoft.osgi.aps.groups,
            se.natusoft.osgi.aps.groups.config,
            se.natusoft.osgi.aps.groups.logging,
            se.natusoft.osgi.aps.groups.service
        </osgi.private.package>

        <!-- The packages to export from dependent & embeded jars -->
        <osgi.export.dependency.package>
        </osgi.export.dependency.package>

        <!-- The resources to include in the bundle -->
        <osgi.include.resource>
        </osgi.include.resource>

        <!-- The default for embedding dependencies in bundle. -->
        <osgi.embed.dependency>*;scope=compile</osgi.embed.dependency>

        <!-- The directory whose content should be embeded into the bundle jar. -->
        <osgi.embed.directory>lib</osgi.embed.directory>

        <!--
            Other properties
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--
            APS properties.
        -->

        <!-- We register our configuration for auto registration and management. -->
        <aps.config.classes>se.natusoft.osgi.aps.groups.config.APSGroupsServiceConfig</aps.config.classes>

        <!--
             Trigger tiles.
         -->
        <tile.deploy>${project.groupId}:DeployBundleTile:${project.version}</tile.deploy>

    </properties>

    <dependencies>
        <!--
            APS
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-apis</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-tools-lib</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!--
                Force the jar plugin to use the maven-bundle-plugin generated manifest.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <!--
                OSGi bundle handling.
            -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                    </supportedProjectTypes>
                    <archive>
                        <manifestEntries>
                            <APS-Configs>${aps.config.classes}</APS-Configs>
                            <Main-Class>se.natusoft.apsgroups.CmdLineTestShell</Main-Class>
                            <!--Bundle-ClassPath>${osgi.bundle.classpath}</Bundle-ClassPath-->
                        </manifestEntries>
                    </archive>
                    <instructions>
                        <Export-Package>${osgi.export.package}</Export-Package>
                        <Import-Package>${osgi.import.package}</Import-Package>
                        <_exportcontents>${osgi.export.dependency.package}</_exportcontents>
                        <Private-Package>${osgi.private.package}</Private-Package>
                        <Include-Resource>${osgi.include.resource}</Include-Resource>
                        <Bundle-SymbolicName>${osgi.bundle.symbolic.name}</Bundle-SymbolicName>
                        <Bundle-Activator>${osgi.bundle.activator}</Bundle-Activator>
                        <Embed-Directory>${osgi.embed.directory}</Embed-Directory>
                        <Embed-Dependency>${osgi.embed.dependency}</Embed-Dependency>
                    </instructions>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
