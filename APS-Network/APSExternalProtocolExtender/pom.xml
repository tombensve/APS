<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    PROJECT
        Name
            APS External Protocol Extender
        
        Code Version
            0.9.1
        
        Description
            This does two things:
            
            1) Looks for "APS-Externalizable: true" MANIFEST.MF entry in deployed bundles and if found and bundle status is
            ACTIVE, analyzes the service API and creates an APSExternallyCallable wrapper for each service method and
            keeps them in memory until bundle state is no longer ACTIVE. In addition to the MANIFEST.MF entry it has
            a configuration of fully qualified service names that are matched against the bundles registered services
            for which an APSExternallyCallable wrapper will be created.
            
            2) Registers an APSExternalProtocolExtenderService making the APSExternallyCallable objects handled available
            to be called. Note that APSExternallyCallable is an interface extending java.util.concurrent.Callable.
            This service is used by other bundles making the service available remotely trough some protocol like
            JSON for example.
            
            This extender is a middleman making access to services very easy to expose using whatever protocol you want.
            Multiple protocol bundles using the APSExternalProtocolExtenderService can be deployed at the same time making
            services available through more than one protocol.
        
    COPYRIGHTS
        Copyright (C) 2012 by Natusoft AB All rights reserved.
        
    LICENSE
        Apache 2.0 (Open Source)
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
          http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
    AUTHORS
        Tommy Svensson (tommy@natusoft.se)
            Changes:
            2013-02-03: Created!
            
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>APS-Network</artifactId>
        <groupId>se.natusoft.osgi.aps</groupId>
        <version><!--APSVER-->0.9.2</version>
        <relativePath>..</relativePath>
    </parent>

    <artifactId>aps-external-protocol-extender</artifactId>
    <packaging>bundle</packaging>

    <name>APS External Protocol Extender</name>

    <description>
        This does two things:

        1) Looks for "APS-Externalizable: true" MANIFEST.MF entry in deployed bundles and if found and bundle status is
           ACTIVE, analyzes the service API and creates an APSExternallyCallable wrapper for each service method and
           keeps them in memory until bundle state is no longer ACTIVE. In addition to the MANIFEST.MF entry it has
           a configuration of fully qualified service names that are matched against the bundles registered services
           for which an APSExternallyCallable wrapper will be created.

        2) Registers an APSExternalProtocolExtenderService making the APSExternallyCallable objects handled available
           to be called. Note that APSExternallyCallable is an interface extending java.util.concurrent.Callable.
           This service is used by other bundles making the service available remotely trough some protocol like
           JSON for example.

        This extender is a middleman making access to services very easy to expose using whatever protocol you want.
        Multiple protocol bundles using the APSExternalProtocolExtenderService can be deployed at the same time making
        services available through more than one protocol.
    </description>

    <properties>
        <!-- 
            Bundle properties 
        -->

        <!-- The symbolic name of the bundle. Defaults to the artifact id, but can be overriden. -->
        <osgi.bundle.symbolic.name>${project.artifactId}</osgi.bundle.symbolic.name>

        <!-- The bundle activator class -->
        <osgi.bundle.activator>se.natusoft.osgi.aps.externalprotocolextender.APSExternalProtocolExtenderActivator</osgi.bundle.activator>

        <!-- The bundle packages to export. -->
        <osgi.export.package>
            se.natusoft.osgi.aps.externalprotocolextender.pub.config
        </osgi.export.package>

        <!-- The packages to import for the bundle. -->
        <osgi.import.package>*</osgi.import.package>

        <!-- The private packages. -->
        <osgi.private.package>
            se.natusoft.osgi.aps.externalprotocolextender,
            se.natusoft.osgi.aps.externalprotocolextender.service,
            se.natusoft.osgi.aps.externalprotocolextender.model
        </osgi.private.package>

        <!-- The packages to export from dependent & embeded jars -->
        <osgi.export.dependency.package>
        </osgi.export.dependency.package>

        <!-- The resources to include in the bundle -->
        <osgi.include.resource>
        </osgi.include.resource>

        <!-- The default for embedding dependencies in bundle. -->
        <osgi.embed.dependency>*;scope=compile</osgi.embed.dependency>

        <!-- The directory whose content should be embeded into the bundle jar. -->
        <osgi.embed.directory>lib</osgi.embed.directory>

        <!--
             Trigger tiles.
         -->
        <tile.deploy>${project.groupId}:DeployBundleTile:${project.version}</tile.deploy>
        <tile.doc>${project.groupId}:DocTile:${project.version}</tile.doc>

        <!--
            Misc properties
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--
            APS
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-apis</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-tools-lib</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!--
                Force the jar plugin to use the maven-bundle-plugin generated manifest.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <!--
                OSGi bundle handling.
            -->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.3.5</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                    </supportedProjectTypes>
                    <archive>
                        <manifestEntries>
                            <!--Bundle-ClassPath>${osgi.bundle.classpath}</Bundle-ClassPath-->
                        </manifestEntries>
                    </archive>
                    <instructions>
                        <Export-Package>${osgi.export.package}</Export-Package>
                        <Import-Package>${osgi.import.package}</Import-Package>
                        <_exportcontents>${osgi.export.dependency.package}</_exportcontents>
                        <Private-Package>${osgi.private.package}</Private-Package>
                        <Include-Resource>${osgi.include.resource}</Include-Resource>
                        <Bundle-SymbolicName>${osgi.bundle.symbolic.name}</Bundle-SymbolicName>
                        <Bundle-Activator>${osgi.bundle.activator}</Bundle-Activator>
                        <Embed-Directory>${osgi.embed.directory}</Embed-Directory>
                        <Embed-Dependency>${osgi.embed.dependency}</Embed-Dependency>
                    </instructions>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
