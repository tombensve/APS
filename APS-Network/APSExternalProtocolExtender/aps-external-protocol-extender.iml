<?xml version="1.0" encoding="UTF-8"?>
<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
  <component name="FacetManager">
    <facet type="Osmorc" name="OSGi">
      <configuration manifestGenerationMode="OsmorcControlled" manifestLocation="" jarfileLocation="aps-external-protocol-extender-0.9.1.jar" outputPathType="CompilerOutputPath" bndFileLocation="" bundlorFileLocation="" bundleActivator="se.natusoft.osgi.aps.externalprotocolextender.APSExternalProtocolExtenderActivator" bundleSymbolicName="aps-external-protocol-extender" bundleVersion="0.9.1" ignoreFilePattern="" useProjectDefaultManifestFileLocation="true" alwaysRebuildBundleJAR="false" doNotSynchronizeWithMaven="false">
        <additionalProperties>
          <property key="Bundle-Description" value="This does two things:1) Looks for &quot;APS-Externalizable: true&quot; MANIFEST.MF entry in deployed bundles and if found and bundle status isACTIVE, analyzes the service API and creates an APSExternallyCallable wrapper for each service method andkeeps them in memory until bundle state is no longer ACTIVE. In addition to the MANIFEST.MF entry it hasa configuration of fully qualified service names that are matched against the bundles registered servicesfor which an APSExternallyCallable wrapper will be created.2) Registers an APSExternalProtocolExtenderService making the APSExternallyCallable objects handled availableto be called. Note that APSExternallyCallable is an interface extending java.util.concurrent.Callable.This service is used by other bundles making the service available remotely trough some protocol likeJSON for example.This extender is a middleman making access to services very easy to expose using whatever protocol you want.Multiple protocol bundles using the APSExternalProtocolExtenderService can be deployed at the same time makingservices available through more than one protocol." />
          <property key="Bundle-Vendor" value="Natusoft AB" />
          <property key="Bundle-DocURL" value="http://www.natusoft.se/" />
          <property key="Export-Package" value="se.natusoft.osgi.aps.externalprotocolextender.pub.config" />
          <property key="Import-Package" value="*" />
          <property key="Private-Package" value="se.natusoft.osgi.aps.externalprotocolextender,se.natusoft.osgi.aps.externalprotocolextender.service,se.natusoft.osgi.aps.externalprotocolextender.model" />
          <property key="Embed-Directory" value="lib" />
          <property key="Embed-Dependency" value="*;scope=compile" />
          <property key="Bundle-Name" value="APS External Protocol Extender" />
        </additionalProperties>
        <additionalJARContents />
      </configuration>
    </facet>
  </component>
  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
    <output url="file://$MODULE_DIR$/target/classes" />
    <output-test url="file://$MODULE_DIR$/target/test-classes" />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/target" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="module" module-name="aps-apis" scope="PROVIDED" />
    <orderEntry type="library" scope="PROVIDED" name="Maven: org.eclipse.persistence:javax.persistence:2.0.0" level="project" />
    <orderEntry type="library" scope="PROVIDED" name="Maven: javax.jcr:jcr:2.0" level="project" />
    <orderEntry type="module" module-name="aps-tools-lib" scope="PROVIDED" />
    <orderEntry type="library" scope="PROVIDED" name="Maven: org.osgi:org.osgi.core:4.2.0" level="project" />
    <orderEntry type="library" scope="PROVIDED" name="Maven: org.osgi:org.osgi.compendium:4.2.0" level="project" />
    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.8.2" level="project" />
  </component>
</module>

