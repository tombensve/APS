<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    PROJECT
        Name
            APS OpenJPA Provider
        
        Code Version
            1.0.0
        
        Description
            Provides an implementation of APSJPAService using OpenJPA.
        
    COPYRIGHTS
        Copyright (C) 2012 by Natusoft AB All rights reserved.
        
    LICENSE
        Apache 2.0 (Open Source)
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
          http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
    AUTHORS
        Tommy Svensson (tommy@natusoft.se)
            Changes:
            2013-02-02: Created!
            
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>APS-Data</artifactId>
        <groupId>se.natusoft.osgi.aps</groupId>
        <version>1.0.0</version>
    </parent>

    <artifactId>aps-openjpa-provider</artifactId>
    <packaging>jar</packaging>

    <!--
        Please note that this pom has packaging jar, not bundle! The problem is that jpa-2.2.0.jar
        is locally embedded within the bundle. This is a problem due to that Apache Felix Bundle Plugin
        examines the jars all references and determines which is not locally available and thereby forces
        Import-Package entries for those. This is correct behavior and is what you want in most
        cases, but in this case jpa-2.2.0.jar has non required dependencies which we don't use
        but the bundle plugin makes these required dependencies by adding them to Import-Package.

        To solve this I have made this a simple jar and provided my own MANIFEST.MF and jpa-2.2.0.jar
        in src/main/resources/META-INF and src/main/resources/lib respectively.
    -->

    <name>APS OpenJPA Provider</name>

    <description>
        Provides an implementation of APSJPAService using OpenJPA.
    </description>

    <properties>
        <!--
            Trigger tiles.
        -->
        <tile.deploy>${project.groupId}:DeployBundleTile:${project.version}</tile.deploy>

        <!--
            Other
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--
            APS
        -->
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-apis</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>se.natusoft.osgi.aps</groupId>
            <artifactId>aps-tools-lib</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>

        <!--
            Other
        -->
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.enterprise</artifactId>
            <version>4.2.0</version>
            <scope>provided</scope>
        </dependency>

        <!--suppress osmorcNonOsgiMavenDependency -->
        <dependency>
            <groupId>org.apache.openjpa</groupId>
            <artifactId>openjpa-all</artifactId>
            <version>2.2.0</version>
            <scope>provided</scope>
        </dependency>

        <!--suppress osmorcNonOsgiMavenDependency -->
        <dependency>
            <groupId>se.natusoft.tools.xob</groupId>
            <artifactId>xob</artifactId>
            <version>5.0</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!--
                    The following so that we can used variables in the MANIFEST.MF.
                -->
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <!--
                Force the jar plugin to use the maven-bundle-plugin generated manifest.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <!--manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile-->
                        <manifestFile>target/classes/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <!--
                OSGi bundle handling.
            -->
            <!--
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.3.5</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                    </supportedProjectTypes>
                    <archive>
                        <manifestEntries>
                            //Bundle-ClassPath>${osgi.bundle.classpath}</Bundle-ClassPath
                        </manifestEntries>
                    </archive>
                    <instructions>
                        <Export-Package>${osgi.export.package}</Export-Package>
                        <Import-Package>${osgi.import.package}</Import-Package>
                        <_exportcontents>${osgi.export.dependency.package}</_exportcontents>
                        <Private-Package>${osgi.private.package}</Private-Package>
                        <Include-Resource>${osgi.include.resource}</Include-Resource>
                        <Bundle-SymbolicName>${osgi.bundle.symbolic.name}</Bundle-SymbolicName>
                        <Bundle-Activator>${osgi.bundle.activator}</Bundle-Activator>
                        <Embed-Directory>${osgi.embed.directory}</Embed-Directory>
                        <Embed-Dependency>${osgi.embed.dependency}</Embed-Dependency>
                    </instructions>
                </configuration>
            </plugin>
            -->
        </plugins>
    </build>

</project>
